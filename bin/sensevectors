#!/usr/bin/env Rscript --vanilla --default-packages=methods,utils,stats

cliargs = commandArgs(trailingOnly=TRUE)

# create parser object
parser <- argparse::ArgumentParser(description='Get sensevectors.')

# specify desired options by default ArgumentParser will add an help option
parser$add_argument('--install', action='store_true', default='FALSE', help='Install sensasim R package.')
parser$add_argument('--run', action='store_true', default='FALSE', help='Run this script.')
parser$add_argument('-p', '--parallel', nargs=1, type='integer', default=1, help='Number of parallel processes [specify 0 for number of cores-1, default %(default)s]', metavar='number')
parser$add_argument('-i', '--input', nargs=1, type='character', default='-', help='Input file location [specify - for stdin, default %(default)s]', metavar='filename')
parser$add_argument('-o', '--output', nargs=1, type='character', default='-', help='Output file location [specify - for stdout, default %(default)s]', metavar='filename')
parser$add_argument('-m', '--vsmodel', type='character', help='VSM model', metavar='modelname')
parser$add_argument('-s', '--sensemodel', type='character', help='JoBimText sense model', metavar='modelname')
parser$add_argument('-t', '--topn', type='integer', nargs=1, default=5, help='Use top n sense terms [default %(default)s]', metavar='number')
parser$add_argument('-l', '--lambda', type='double', nargs=1, default=0.5, help='Shift the sense vectors by lambda into the direction of its base vector [default %(default)s]', metavar='number')
parser$add_argument('--models', action='store_true', default='FALSE', help='Get more details of default models.')

# get command line options, if help option encountered print help and exit,
# otherwise if options not found on command line then set defaults,

args <- parser$parse_args(cliargs)

if (args$install) {
  if(!('devtools' %in% installed.packages()[,'Package'])){
    stop('Please install R package \'devtools\' (R> install.packages("devtools")). ', call. = F)
  }
  devtools::install_github('uhh-lt/senseasim')
}

# run only if specifically specified
if(args$run) {

  library(senseasim)

  inputfile <- NULL
  if(args$models){
    # generate help string
    m <- sensevectors$.defaults
    message(sprintf('%s: \'%s\'\n', names(m), m))
    q()
  }
  if( args$input != '-' ){
    inputfile <- args$input
  }
  outputfile <- NULL
  if( args$output != '-' ){
    outputfile <- args$output
  }
  if(!is.null(args$vsmodel)){
    sensevectors$.defaults$vsm_model <- args$vsmodel
  }
  if(!is.null(args$sensemodel)){
    sensevectors$.defaults$jbt_sense_api <- args$sensemodel
  }
  if(args$topn != sensevectors$.defaults$topn_sense_terms){
    sensevectors$.defaults$topn_sense_terms <- args$topn
  }
  if(args$lambda != sensevectors$.defaults$shift_lambda){
    sensevectors$.defaults$shift_lambda <- args$lambda
  }
  if(args$parallel == 1) {
    sensevectors$run(inputfile = inputfile, outputfile = outputfile)
  }else{
    if(is.null(inputfile) || is.null(outputfile)){
      stop('Parallel mode requires an inputfile and an outputfile other than stdin and stdout!', call. = F)
    }
    sensevectors$run_parallel(inputfile = inputfile, outputfile = outputfile, cl = args$parallel)
  }
}else{
  message(sprintf('[%s-%d-%s] not running script. Specify \'--run\' parameter if you want to run the script from the commandline.', gsub('\\..*$', '', Sys.info()[['nodename']]), Sys.getpid(), format(Sys.time(), '%m%d-%H%M%S')))
}
